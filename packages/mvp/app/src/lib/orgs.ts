/**
 * @file CRUD operations for organizations.
 */
import { Account, db, eq, Opportunity, Organization, OrgRole, sql, Task, User } from 'astro:db';

type CreateOrgValue = Omit<typeof Organization.$inferInsert, 'id'>;
type OrgId = typeof Organization.$inferSelect['id'];

/**
 * Inserts a row in the "Organization" table.
 *
 * @param org An object with properties defining a new Organization.
 * @returns The newly inserted row, including the "id" value automatically generated by the DB.
 */
export async function createOrg(org: CreateOrgValue): Promise<typeof Organization.$inferSelect> {
	return db
		.insert(Organization)
		.values(org)
		.returning()
		.get();
}

const selectOrg = db
	.select()
	.from(Organization)
	.where(eq(sql.placeholder('id'), Organization.id))
	.prepare();

const selectOrgTasks = db
	.select()
	.from(Task)
	.where(eq(Task.org, sql.placeholder('id')))
	.prepare();

const selectOrgAccounts = db
	.select()
	.from(Account)
	.where(eq(Account.org, sql.placeholder('id')))
	.prepare();

const selectOrgOpportunities = db
	.select()
	.from(Opportunity)
	.where(eq(Opportunity.org, sql.placeholder('id')))
	.prepare();

const joinOrgMembers = db
	.select()
	.from(OrgRole)
	.leftJoin(User, eq(OrgRole.user, User.id))
	.leftJoin(Organization, eq(OrgRole.org, Organization.id))
	.where(eq(Organization.id, sql.placeholder('org')))
	.prepare();

/**
 * Get information about an Organization with the given "id".
 *
 * @param id The id of the Organization.
 * @returns The first matching fow from the "Organization" table if found.
 */
export function getOrgInfo(id: OrgId): Promise<typeof Organization.$inferSelect | undefined> {
	return selectOrg.get({ id });
}

/**
 * Get all the tasks for the given Organization
 *
 * @param id The id of the Organization.
 * @returns Rows from the "Task" table.
 */
export function getOrgTasks(id: OrgId): Promise<typeof Task.$inferSelect[]> {
	return selectOrgTasks.all({ id });
}

/**
 * Get all the accounts for the given Organization
 *
 * @param id The id of the Organization.
 * @returns Rows from the "Account" table.
 */
export function getOrgAccounts(id: OrgId): Promise<typeof Account.$inferSelect[]> {
	return selectOrgAccounts.all({ id });
}

/**
 * Get all the opportunities for the given Organization
 *
 * @param id The id of the Organization.
 * @returns Rows from the "Opportunity" table.
 */
export function getOrgOpportunities(id: OrgId): Promise<typeof Opportunity.$inferSelect[]> {
	return selectOrgOpportunities.all({ id });
}

export function getOrgMembers(id: OrgId) {
	return joinOrgMembers.all({ id });
}
